name: "Environment build / deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  image_build:
    name: "Build"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      registry: ${{ steps.ecr-login.outputs.registry }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Configuring AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: "Logging into ECR"
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr-login

      - name: "Build & Push to ECR"
        run: |
          docker image build -t $REGISTRY/$REPOSITORY:fpm-$IMAGE_TAG --target build-fpm .
          docker image build -t $REGISTRY/$REPOSITORY:nginx-$IMAGE_TAG --target nginx .
          docker push $REGISTRY/$REPOSITORY:fpm-$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:nginx-$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

  deploy_environment:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: image_build
    environment: ${{ inputs.environment }}
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      ##########################################
      ####      Generate keys and salts     ####
      ##########################################
      - name: "Generating auth key"
        uses: licenseware/generate-password-and-hash@v1
        id: auth-key
        with:
          length: 64
      - name: "... auth salt"
        uses: licenseware/generate-password-and-hash@v1
        id: auth-salt
        with:
          length: 64
      - name: "... logged in key"
        uses: licenseware/generate-password-and-hash@v1
        id: logged-in-key
        with:
          length: 64
      - name: "... logged in salt"
        uses: licenseware/generate-password-and-hash@v1
        id: logged-in-salt
        with:
          length: 64
      - name: "... nonce key"
        uses: licenseware/generate-password-and-hash@v1
        id: nonce-key
        with:
          length: 64
      - name: "... nonce salt"
        uses: licenseware/generate-password-and-hash@v1
        id: nonce-salt
        with:
          length: 64
      - name: "... secure key"
        uses: licenseware/generate-password-and-hash@v1
        id: secure-key
        with:
          length: 64
      - name: "... secure salt"
        uses: licenseware/generate-password-and-hash@v1
        id: secure-salt
        with:
          length: 64

      ##########################################
      ####          ===============         ####
      ##########################################

      - name: "Inject environment variables"
        env:
          TPL_PATH: "deploy/${{ inputs.environment }}"
          ECR_URL: ${{ needs.image_build.outputs.registry }}/${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG_NGINX: ::add-mask::"nginx-${{ github.sha }}"
          IMAGE_TAG_FPM: "fpm-${{ github.sha }}"
          AUTH_KEY: ::add-mask::${{ steps.auth-key.outputs.password }}
          AUTH_SALT: ::add-mask::${{ steps.auth-salt.outputs.password }}
          LOGGED_IN_KEY: ::add-mask::${{ steps.logged-in-key.outputs.password }}
          LOGGED_IN_SALT: ::add-mask::${{ steps.logged-in-salt.outputs.password }}
          NONCE_KEY: ::add-mask::${{ steps.nonce-key.outputs.password }}
          NONCE_SALT: ::add-mask::${{ steps.nonce-salt.outputs.password }}
          SECURE_AUTH_KEY: ::add-mask::${{ steps.secure-key.outputs.password }}
          SECURE_AUTH_SALT: ::add-mask::${{ steps.secure-salt.outputs.password }}
        run: |
          cat $TPL_PATH/secret.tpl | envsubst > $TPL_PATH/secret.yaml
          cat $TPL_PATH/deployment.tpl | envsubst > $TPL_PATH/deployment.yaml

      - name: "Authenticate to the cluster"
        env:
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: "Apply manifest files"
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f deploy/${{ inputs.environment }}
