# Set rate limit zone 'flood'
limit_req_zone $binary_remote_addr zone=flood:15m rate=5r/s;

s3fs -o nonempty $AWS_S3_BUCKET/uploads /var/www/html/public/app/uploads/

# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

server {
    listen       8080;
    server_name  localhost;

    root /var/www/html/public;
    index index.php;

    client_max_body_size 250m;
    error_page 404 index.php;

    # Rewrite old upload URLs to the bedrock equivalent
    location /wp-content/uploads/ {
        rewrite ^/wp-content/uploads/(.*)$ /app/uploads/$1 permanent;
    }

    location / {
        # First attempt to serve request as file, then
        # as a directory, then pass the request to
        # WordPress's front controller.
        try_files $uri $uri/ /index.php?$args;
    }

    # deny access to dotfiles accept .well-known
    # this will deny access to .git, .htaccess, .env, and other sensitive files
    location ~ /\.(?!well-known).* {
        deny all;
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    location ~ \.php$ {
        include /etc/nginx/php-fpm.conf;
        fastcgi_pass localhost:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
    }
}
