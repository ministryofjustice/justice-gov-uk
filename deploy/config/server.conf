# Set rate limit zone 'flood'
limit_req_zone $http_x_forwarded_for zone=flood:15m rate=1r/m;

# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

upstream fpm {
    server unix:/sock/fpm.sock;
}

# Content Security Policy (CSP) settings
# - The CSP is split into four parts: one for styles, images, scripts and web workers.
# - In all parts, the default CSP is used for public pages, while a specific CSP is used for admin pages.

map $request_uri $csp_image {
    # Default CSP for public pages
    # - self: allow images hosted on the same origin.
    default "img-src 'self'";

    # Default CSP for admin pages
    # - self: allow images hosted on the same origin.
    # - data: allow images where ths source is a string of data. e.g. some WordPress icons.
    ~^/wp/wp-admin/ "img-src 'self' data:";
}

map $http_cookie $csp_style_logged_in {
    # Default CSP for logged out users
    # - `wJhuVOwbaj2m4lNrWw4lhKWa0pNOruaWFSuUso0hIRE=`: the hash of the inline styles in the error pages.
    default "'sha256-wJhuVOwbaj2m4lNrWw4lhKWa0pNOruaWFSuUso0hIRE='";

    # Specific CSP for logged in users
    # If the user has a cookie to indicate that they have logged in, then we need to allow
    # inline-styles, this is for WordPress plugin compatibility, for plugins like Query Monitor
    # and Debug Bar, that add inline styles to the page.
    "~*wordpress_logged_in" "'unsafe-inline'";
}


map $request_uri $csp_style {
    # Default CSP for public pages
    # - self: allows styles from the same origin.
    default "style-src 'self' $csp_style_logged_in";

    # Specific CSP for admin pages
    # - self: allows styles from the same origin.
    # - unsafe-inline: allows inline styles, e.g. the `style`s for revisionary and tree view.
    ~^/wp/wp-login.php "style-src 'self' 'unsafe-inline'";
    # - unsafe-eval: necessary for admin scripts e.g. for Media Library.
    ~^/wp/wp-admin/ "style-src 'self' 'unsafe-inline' 'unsafe-eval'";

    # For theme assets, we allow the inline styles, set by the user agent.
    # - unsafe-inline: allows inline styles, e.g. the `style` attribute on images.
    ~^/app/themes/justice/dist/ "style-src 'self' 'unsafe-inline'";
}


map $http_cookie $csp_script_logged_in {
    # Default CSP for logged out users
    # - `Ac6EurLc5WNuBriCCA6Gi746Ieu1q/votBRNGQmBSUk=`: the hash of the script that calls mojLoadLocalizedData with the Sentry config.
    default " 'sha256-Ac6EurLc5WNuBriCCA6Gi746Ieu1q/votBRNGQmBSUk='";

    # Specific CSP for logged in users
    # If the user has a cookie to indicate that they have logged in, then we need to allow
    # inline-scripts, this is for WordPress plugin compatibility, for plugins like Query Monitor
    # and Debug Bar, that add inline scripts to the page.
    "~*wordpress_logged_in" "'unsafe-inline'";
}

map $request_uri $csp_script {
    # Default CSP for public pages
    # - self: allows scripts from the same origin.
    # - unsafe-inline: allows inline scripts, e.g. the `onclick` attribute on header menu items.
    # - googletagmanager.com: allows scripts from Google Tag Manager.
    default "script-src 'self' https://www.googletagmanager.com/ $csp_script_logged_in";

    # Specific CSP for admin pages
    # - self: allows scripts from the same origin.
    # - unsafe-inline: allows inline scripts, potentially used by plugins or themes.
    ~^/wp/wp-login.php "script-src 'self' 'unsafe-inline'";
    # - unsafe-eval: necessary for admin scripts e.g. for Media Library.
    ~^/wp/wp-admin/ "script-src 'self' 'unsafe-inline' 'unsafe-eval'";
}

map $request_uri $csp_worker {
    # Default CSP for public pages
    # - self: allow workers hosted on the same origin.
    # - blob: allow workers where the source is a blob, e.g. for Sentry Browser Tracing.
    default "worker-src 'self' blob:";
}

# Configure fastcgi cache
fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=pub01:100m inactive=60m;
fastcgi_cache_use_stale updating error timeout invalid_header http_500;
fastcgi_cache_key "$request_method$host$request_uri:$cookie_frontend_version";

server {
    listen       8080;

    root /var/www/html/public;
    index index.php;

    # Prevents internal rewrites going to http and port 8080.
    absolute_redirect off;

    include /etc/nginx/headers.conf;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    client_max_body_size 250m;
    server_tokens off;
    error_page 400 /app/themes/justice/error-pages/400.html;
    error_page 401 /auth/401; # Use a dynamic 401 page, to conditionally redirect to login.
    error_page 404 /app/themes/justice/error-pages/404.html;
    error_page 429 /app/themes/justice/error-pages/429.html;
    error_page 500 /app/themes/justice/error-pages/500.html;
    error_page 503 /app/themes/justice/error-pages/maintenance.html;

    # Empty location blocks to allow access when "/" location
    # sends an HTTP 503 during maintenance mode
    location /app/themes/justice/error-pages/ { }
    location /app/themes/justice/dist/ { }

    # Rewrite old upload URLs to the bedrock equivalent
    location /wp-content/uploads/ {
        rewrite ^/wp-content/uploads/(.*)$ /app/uploads/$1 permanent;
    }

    # Include redirects
    include /etc/nginx/redirects.conf;

    ##
    # CACHING
    ##

    # Cache the request, unless...
    set $skip_cache 0;

    # ...it's a POST request
    if ($request_method = POST) {
        set $skip_cache 1;
    }

    # ...there are query string parameters
    if ($query_string != "") {
        set $skip_cache 1;
    }

    # ...it's for a special WordPress URL which should not be cached (including wp-admin)
    if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml|[a-z0-9_-]+-sitemap([0-9]+)?.xml)") {
        set $skip_cache 1;
    }

    # ...it's from a logged in user, or the cookie 'wordpress_no_cache' exists
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }

    # ...if's for a user that doesn't have a frontend_version cookie set
    if ($cookie_frontend_version = "") {
        set $skip_cache 1;
    }

    # ...it's to an auth path
    if ($request_uri ~* "^/auth/") {
        set $skip_cache 1;
    }

    ##
    # LOCATIONS
    # - Deny
    # - Cache
    # - Auth
    # - Static files & WordPress
    # - Misc
    ##

    ##
    # LOCATIONS - Deny
    ##

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    # deny access to dotfiles accept .well-known
    # this will deny access to .git, .htaccess, .env, and other sensitive files
    location ~ /\.(?!well-known).* {
        deny all;
    }

    # Deny access to load-scripts.php and load-styles.php to prevent DoS attacks.
    # These are endpoints used by php to concatenate scripts and styles.
    # We're serving these with nginx instead.
    location ~* ^/wp/wp-admin/load-(?:scripts|styles)\.php$ {
        deny all;
    }

    # Deny access to /wp/xmlrpc.php and /wp/wp-admin/install.php
    location ~* ^/wp/(xmlrpc|wp-admin/install).php {
        deny all;
    }

    # Deny access to /wp/wp-cron.php, except for connections from localhost (fpm sidecar container)
    location ~* ^/wp/wp-cron.php {
        allow 127.0.0.1;
        deny all;
        include /etc/nginx/php-fpm.conf;
        fastcgi_pass fpm;
    }

    ##
    # LOCATIONS - Cache
    ##

    location ~ /purge-cache(/.*) {
        limit_req zone=flood burst=5 nodelay;
        fastcgi_cache_purge pub01 "$request_method$host$1:*";
    }

    ##
    # LOCATIONS - Auth
    ##

    # @see https://gock.net/blog/2020/nginx-subrequest-authentication-server
    location = /auth/verify {
        # Internal only, so /auth/verify can not be accessed from outside.
        internal;

        # As auth is only used on the login page, the following logic is specific to that URL.
        set $skip_verify 0;

        # Skip the verify, if we are in the logout flow. See wp/wp-includes/general-template.php > wp_logout_url
        if ($request_uri ~* "^/wp/wp-login\.php\?action=logout&_wpnonce=[a-z0-9]+(&redirect_to=[^&]*)?$") {
            set $skip_verify 1;
        }

        # Skip the verify, if we are at the logged out screen. See wp/wp-login.php > case 'logout'.
        if ($request_uri ~* "^/wp/wp-login\.php\?loggedout=true&wp_lang=[A-Za-z_-]+$") {
            set $skip_verify 1;
        }

        # If POST request, we need to verify the user, and overwrite any previous skip.
        if ($request_method = POST) {
            set $skip_verify 0;
        }

        if ($skip_verify = 1) {
            return 200;
        }

        # The sub-request handler, WordPress is not loaded in this file.
        set $script_name /app/mu-plugins/moj-auth/verify.php;
        include /etc/nginx/php-fpm-auth.conf;
    }

    location ~ ^/auth/401 {
        # Internal only, so /auth/verify can not be accessed from outside.
        internal;

        # The 401 handler, WordPress is not loaded in this file.
        set $script_name /app/mu-plugins/moj-auth/401.php;
        include /etc/nginx/php-fpm-auth.conf;
    }

    # Rewrite auth endpoints to fpm (WordPress's index.php)
    location ~ ^/auth/(login|callback) {
        auth_request off;
        rewrite /auth/* /index.php?$args;
    }

    ##
    # LOCATIONS - Static files & WordPress
    ##

    location / {
        # First attempt to serve request as file, then
        # as a directory, then pass the request to
        # WordPress's front controller.
        try_files $uri $uri/ /index.php?$args;
    }
   
    # Use auth_request & rate limit on /wp/wp-login.php & /wp/wp-admin/upgrade.php
    location ~* ^/wp/(wp-login|wp-admin/upgrade).php {
        include /etc/nginx/auth-request.conf;

        limit_req zone=flood burst=15 nodelay;
        limit_req_status 429;

        include /etc/nginx/php-fpm.conf;
        fastcgi_pass fpm;

        include /etc/nginx/headers.conf;
    }

    location ~ \.php$ {
        include /etc/nginx/php-fpm.conf;
        fastcgi_pass fpm;

        include /etc/nginx/headers.conf;
    }

    ##
    # LOCATIONS - health
    ##

    # This location covers liveness and readiness for the nginx container.
    location = /health {
        return 200;
    }

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;
}
